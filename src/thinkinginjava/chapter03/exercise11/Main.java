package thinkinginjava.chapter03.exercise11;

/*
 * Chapter 3. Exercise 11. Difficult - 3/10.
 *
 * Start with a number that has a binary one in the most significant position (hint: Use a hexadecimal constant).
 * Using the signed right-shift operator, right shift it all the way through all of its binary positions, each
 * time displaying the result using Integer.toBinaryString( ).
 */

public class Main {

    public static void main(String[] args) {
        int bin = 0b10000000000000000000000000000000;
        bitPrint(bin);

        for (int i = 0; i < 32; i++) {
            bin >>= 1;
            bitPrint(bin);
        }
    }

    private static void bitPrint(int bin) {
        String s2 = String.format("%32s", Integer.toBinaryString(bin)).replace(' ', '0');
        System.out.println(s2);
    }
}

/*
 * Out:
 *
 * 10000000000000000000000000000000
 * 11000000000000000000000000000000
 * 11100000000000000000000000000000
 * 11110000000000000000000000000000
 * 11111000000000000000000000000000
 * 11111100000000000000000000000000
 * 11111110000000000000000000000000
 * 11111111000000000000000000000000
 * 11111111100000000000000000000000
 * 11111111110000000000000000000000
 * 11111111111000000000000000000000
 * 11111111111100000000000000000000
 * 11111111111110000000000000000000
 * 11111111111111000000000000000000
 * 11111111111111100000000000000000
 * 11111111111111110000000000000000
 * 11111111111111111000000000000000
 * 11111111111111111100000000000000
 * 11111111111111111110000000000000
 * 11111111111111111111000000000000
 * 11111111111111111111100000000000
 * 11111111111111111111110000000000
 * 11111111111111111111111000000000
 * 11111111111111111111111100000000
 * 11111111111111111111111110000000
 * 11111111111111111111111111000000
 * 11111111111111111111111111100000
 * 11111111111111111111111111110000
 * 11111111111111111111111111111000
 * 11111111111111111111111111111100
 * 11111111111111111111111111111110
 * 11111111111111111111111111111111
 * 11111111111111111111111111111111
 */