package thinkinginjava.chapter03.exercise12;

/*
 * Chapter 3. Exercise 12. Difficult - 3/10.
 *
 * Start with a number that is all binary ones. Left shift it, then use the unsigned right-shift operator to
 * right shift through all of its binary positions, each time displaying the result using Integer.toBinaryString( ).
 */

public class Main {

    public static void main(String[] args) {
        int bin = 0b11111111111111111111111111111111;
        bitPrint(bin);
        bin <<= 16;
        bitPrint(bin);

        for (int i = 0; i < 32; i++) {
            bin >>>= 1;
            bitPrint(bin);
        }
    }

    private static void bitPrint(int bin) {
        String s2 = String.format("%32s", Integer.toBinaryString(bin)).replace(' ', '0');
        System.out.println(s2);
    }
}
/*
 * Out:
 *
 * 11111111111111111111111111111111
 * 11111111111111110000000000000000
 * 01111111111111111000000000000000
 * 00111111111111111100000000000000
 * 00011111111111111110000000000000
 * 00001111111111111111000000000000
 * 00000111111111111111100000000000
 * 00000011111111111111110000000000
 * 00000001111111111111111000000000
 * 00000000111111111111111100000000
 * 00000000011111111111111110000000
 * 00000000001111111111111111000000
 * 00000000000111111111111111100000
 * 00000000000011111111111111110000
 * 00000000000001111111111111111000
 * 00000000000000111111111111111100
 * 00000000000000011111111111111110
 * 00000000000000001111111111111111
 * 00000000000000000111111111111111
 * 00000000000000000011111111111111
 * 00000000000000000001111111111111
 * 00000000000000000000111111111111
 * 00000000000000000000011111111111
 * 00000000000000000000001111111111
 * 00000000000000000000000111111111
 * 00000000000000000000000011111111
 * 00000000000000000000000001111111
 * 00000000000000000000000000111111
 * 00000000000000000000000000011111
 * 00000000000000000000000000001111
 * 00000000000000000000000000000111
 * 00000000000000000000000000000011
 * 00000000000000000000000000000001
 * 00000000000000000000000000000000
 */
