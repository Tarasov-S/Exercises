Thinking in Java: Exercises List


    ############################################
    #### Chapter 2: Everything Is an Object ####
    ############################################

        Exercise 1:   (2)
            Create a class containing an int and a char that are not initialized, and print their values to verify that
            Java performs default initialization.

        Exercise 2:   (1)
            Following the HelloDate.java example in this chapter, create a “hello, world” program that simply displays
            that statement. You need only a single method in your class (the “main” one that gets executed when
            the program starts). Remember to make it static and to include the argument list, even though you don’t use
            the argument list. Compile the program with javac and run it using java. If you are using a different
            development environment than the JDK, learn how to compile and run programs in that environment.

        Exercise 3:   (1)
            Find the code fragments involving ATypeName and turn them into a program that compiles and runs.

        Exercise 4:   (1)
            Turn the DataOnly code fragments into a program that compiles and runs.

        Exercise 5:   (1)
            Modify the previous exercise so that the values of the data in DataOnly are assigned to and printed in main( ).

        Exercise 6:   (2)
            Write a program that includes and calls the storage( ) method defined as a code fragment in this chapter.

        Exercise 7:   (1)
            Turn the Incrementable code fragments into a working program.

        Exercise 8:   (3)
            Write a program that demonstrates that, no matter how many objects you create of a particular class,
            there is only one instance of a particular static field in that class.

        Exercise 9:   (2)
            Write a program that demonstrates that autoboxing works for all the primitive types and their wrappers.

        Exercise 10:   (2)
            Write a program that prints three arguments taken from the command line. To do this, you’ll need to index
            into the command-line array of Strings.

        Exercise 11:   (1)
            Turn the AllTheColorsOfTheRainbow example into a program that compiles and runs.

        Exercise 12:   (2)
            Find the code for the second version of HelloDate.java, which is the simple comment documentation example.
            Execute Javadoc on the file and view the results with your Web browser.

        Exercise 13:   (1)
            Run Documentation1.java, Documentation2.java, and Documentation3.java through Javadoc. Verify the resulting
            documentation with your Web browser.

        Exercise 14:   (1)
            Add an HTML list of items to the documentation in the previous exercise.

        Exercise 15:   (1)
            Take the program in Exercise 2 and add comment documentation to it. Extract this comment documentation into
            an HTML file using Javadoc and view it with your Web browser.

        Exercise 16:   (1)
            In the Initialization & Cleanup chapter, locate the Overloading.java example and add Javadoc documentation.
            Extract this comment documentation into an HTML file using Javadoc and view it with your Web browser.


    ##############################
    #### Chapter 3: Operators ####
    ##############################

        Exercise 1:   (1)
            Write a program that uses the “short” and normal form of print statement.

        Exercise 2:   (1)
            Create a class containing a float and use it to demonstrate aliasing.

        Exercise 3:   (1)
            Create a class containing a float and use it to demonstrate aliasing during method calls.

        Exercise 4:   (2)
            Write a program that calculates velocity using a constant distance and a constant time.

        Exercise 5:   (2)
            Create a class called Dog containing two Strings: name and says. In main( ), create two dog objects with
            names “spot” (who says, “Ruff!”) and “scruffy” (who says, “Wurf!”). Then display their names and what they say.

        Exercise 6:   (3)
            Following Exercise 5, create a new Dog reference and assign it to spot’s object. Test for comparison
            using == and equals( ) for all references.

        Exercise 7:   (3)
            Write a program that simulates coin-flipping.

        Exercise 8:   (2)
            Show that hex and octal notations work with long values. Use Long.toBinaryString( ) to display the results.

        Exercise 9:   (1)
            Display the largest and smallest numbers for both float and double exponential notation.

        Exercise 10:   (3)
            Write a program with two constant values, one with alternating binary ones and zeroes, with a zero in
            the least-significant digit, and the second, also alternating, with a one in the least-significant digit
            (hint: It’s easiest to use hexadecimal constants for this). Take these two values and combine them in all
            possible ways using the bitwise operators, and display the results using Integer.toBinaryString( ).

        Exercise 11:   (3)
            Start with a number that has a binary one in the most significant position (hint: Use a hexadecimal constant).
            Using the signed right-shift operator, right shift it all the way through all of its binary positions, each
            time displaying the result using Integer.toBinaryString( ).

        Exercise 12:   (3)
            Start with a number that is all binary ones. Left shift it, then use the unsigned right-shift operator to
            right shift through all of its binary positions, each time displaying the result using Integer.toBinaryString( ).

        Exercise 13:   (1)
            Write a method that displays char values in binary form. Demonstrate it using several different characters.

        Exercise 12:   (3)
            Start with a number that is all binary ones. Left shift it, then use the unsigned right-shift operator to
            right shift through all of its binary positions, each time displaying the result using Integer.toBinaryString( ).

        Exercise 13:   (1)
            Write a method that displays char values in binary form. Demonstrate it using several different characters.

        Exercise 14:   (3)
            Write a method that takes two String arguments and uses all the boolean comparisons to compare the two
            Strings and print the results. For the == and !=, also perform the equals( ) test. In main( ), call your
            method with some different String objects.


    ##########################################
    #### Chapter 3: Controlling Execution ####
    ##########################################
